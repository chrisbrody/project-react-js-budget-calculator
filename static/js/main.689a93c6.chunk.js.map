{"version":3,"sources":["components/Alert.js","components/ExpenseForm.js","components/ExpenseItem.js","components/ExpenseList.js","App.js","serviceWorker.js","index.js"],"names":["Alert","type","text","className","ExpenseForm","charge","amount","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","id","name","placeholder","value","onChange","ExpenseItem","expense","handleEdit","handleDelete","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","InitialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuid","find","filter","reduce","accumulator","current","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.689a93c6.chunk.js","sourcesContent":["import React from 'react'\n\n// require a type and text when calling Alert to dynamically change class and text\nconst Alert = ({type, text}) => {\n    return (\n\n        <div className={`alert alert-${type}`}>\n            {text}\n        </div>\n    )\n}\n\nexport default Alert\n","import React from 'react';\nimport {MdSend} from 'react-icons/md';\n\n// pass through charge, amount, handleCharge, handleAmount, handleSubmit & edit as parameters \nconst ExpenseForm = ({charge,amount,handleCharge,handleAmount,handleSubmit, edit}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"form-center\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"charge\">charge</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"charge\"\n                        name=\"charge\"\n                        placeholder=\"e.g. rent\"\n                        value={charge}\n                        onChange={handleCharge}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"amount\">amount</label>\n                    <input\n                        type=\"number\"\n                        className=\"form-control\"\n                        id=\"amount\"\n                        name=\"amount\"\n                        placeholder=\"e.g. 100\"\n                        value={amount}\n                        onChange={handleAmount}\n                    />\n                </div>\n            </div>\n            <button className=\"btn\" type=\"submit\">\n                {edit ? 'edit' : 'submit'}\n                <MdSend />\n            </button>\n            \n        </form>\n    )\n}\n\nexport default ExpenseForm\n","import React from 'react';\nimport {MdEdit, MdDelete} from 'react-icons/md'\n\n// pass through expense, handleEdit & handleDelete as parameters \nconst ExpenseItem = ({expense, handleEdit, handleDelete}) => {\n    // set id, charge & amount from expense \n    const { id, charge, amount } = expense\n    \n    return (\n        <li className=\"item\">\n            <div className=\"info\">\n                <span className=\"expense\">{charge}</span>       \n                <span className=\"\">${amount}</span>       \n            </div>    \n            <div>\n                <button className=\"edit-btn\" aria-label=\"edit button\" onClick={() => handleEdit(id)}>\n                    <MdEdit />\n                </button>\n                <button className=\"delete-btn\" aria-label=\"delete button\" onClick={() => handleDelete(id)}>\n                    <MdDelete />\n                </button>\n            </div>\n        </li>\n    )\n}\n\nexport default ExpenseItem\n","import React from 'react';\nimport Item from './ExpenseItem';\nimport { MdDelete } from 'react-icons/md';\n\n// pass through expense, handleEdit, handleDelete & clearItems as parameters \nconst ExpenseList = ({expenses, handleEdit, handleDelete, clearItems}) => {\n        \n    return (\n        <>\n            {/* display the UL list from ExpenseItem.js  */}\n            <ul className=\"list\">\n                {expenses.map((expense) => {\n                    return (\n                        <Item \n                            key={expense.id} \n                            expense={expense} \n                            handleEdit={handleEdit} \n                            handleDelete={handleDelete}\n                        />\n                    );\n                })}\n            </ul>\n            {/* if expenses.length > 0 then render everything after && */}\n            {/* display clear all expenses button if expenses exist */}\n            {expenses.length > 0 && (\n                <button className=\"btn\" onClick={clearItems}>\n                    clear all expenses\n                    <MdDelete className=\"btn-icon\" />\n                </button>\n            )}\n        </>\n    )\n}\n\nexport default ExpenseList","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport ExpenseForm from './components/ExpenseForm';\nimport ExpenseList from './components/ExpenseList';\nimport uuid from 'uuid/v4';\n\n// create starting state\n// const InitialExpenses = [\n//   {id:uuid(), charge:\"rent\", amount:1600},\n//   {id:uuid(), charge:\"car payment\", amount:400},\n//   {id:uuid(), charge:\"credit card bill\", amount:1200},\n// ]\n\n// get local storage data for expenses or an empty string if expenses does not exist in local storage\nconst InitialExpenses = localStorage.getItem('expenses') ? JSON.parse(localStorage.getItem('expenses')) : []\n\nfunction App() {\n  // **************** state value ****************\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(InitialExpenses);\n  // single expense\n  const [charge, setCharge] = useState('');\n  // single charge\n  const [amount, setAmount] = useState('');\n  // alert\n  const [alert, setAlert] = useState({show:false});\n  // edit expense\n  const [edit, setEdit] = useState(false);\n  // id \n  const [id, setId] = useState(0);\n\n  // **************** useEffect ****************\n  useEffect(() => {\n    // set items in local storage anytime the expenses useState is changed\n    localStorage.setItem('expenses', JSON.stringify(expenses))\n    \n  },[expenses])\n  \n  // **************** functionality ****************\n  // handle charge text\n  const handleCharge = e => {\n    // update the charge - ExpenseForm.js\n    setCharge(e.target.value);\n  }\n  // handle amount number\n  const handleAmount = e => {\n    // update the amount - ExpenseForm.js\n    setAmount(e.target.value);\n  }\n  // handle alert\n  const handleAlert = ({type, text}) => {\n    // set alert show property to true and change the text property to the text passed through in whatever alert you need to call\n    setAlert({show:true, type, text});\n    // set timeout to 3s\n    setTimeout(() => {\n      // set alert show property to false \n      setAlert({show:false})\n    }, 3000)\n  }\n  // handle submit \n  const handleSubmit = e => {\n    // stop website refresh\n    e.preventDefault();\n\n    // if both fields are not empty \n    if(charge !== \"\" && amount > 0) {\n      // if edit it true \n      if(edit) {\n        // store tempExpenses from the current expenses\n        let tempExpenses = expenses.map(item => {\n          // return any item where item.id === id then add to the existing array of item or just get the item\n          return item.id === id ? {...item,charge,amount} : item\n        })\n        // update all expenses \n        setExpenses(tempExpenses);\n        // change edit state back to false so user can submit again\n        setEdit(false);\n        // alert item was edited\n        handleAlert({type:'success', text:'item edited'})\n      } else {\n        // create a single expense to add to the list of expenses\n        const singleExpense = {\n          id:uuid(), \n          charge, \n          amount\n        }\n\n        // add to already exisiting list of expenses\n        setExpenses([...expenses, singleExpense]);\n\n        // alert item was added\n        handleAlert({type:'success', text:'item added'});\n      }\n      \n      // clear input fields\n      setCharge('')\n      setAmount('')\n      \n    } else if(charge === \"\") {\n      // alert Charge is empty, please try again\n      handleAlert({type:'danger', text:'Charge is empty, please try again'})\n    } else if (amount <= 0) {\n      // alert Amount should be greater than zero, please try again\n      handleAlert({type:'danger', text:'Amount should be greater than zero, please try again'})\n    }\n  }\n  // clear all expenses\n  const clearItems = () => {\n    // setExpenses to empty array\n    setExpenses([])\n    // alert user to all items being deleted\n    handleAlert({type:'danger', text:'all items deleted'})\n  }\n \n  // handle edit \n  const handleEdit = (id) => {\n    // store expense from the item that matches the id passed in as the parameter\n    let expense = expenses.find(item => item.id === id) ;\n    // store chare and amount from expense \n    let {charge, amount} = expense\n    // update charge to the text in charge\n    setCharge(charge)\n    // update the amount to the number in amount\n    setAmount(amount)\n    // update edit state to true \n    setEdit(true)\n    // update the id state to the parameter passed through\n    setId(id)\n  }\n  // handle delete \n  const handleDelete = (id) => {\n    // store filtered expenses \n    let tempExpenses = expenses.filter(item => item.id !== id)\n    // update setExpenses using filtered expenses\n    setExpenses(tempExpenses)\n    // alert user to a single items being deleted\n    handleAlert({type:'danger', text:'item deleted'})\n  }\n  \n  return (\n    // react fragment\n    <>\n      {/* if alert.show is ever true, display the alert */}\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <Alert />\n      <h1>budget calculator</h1>\n      <main className=\"App\">\n        {/* \n          pass through: charge, amount, handleAmount, handleChange, handleSubmit & edit\n        */}\n        <ExpenseForm \n          charge={charge} \n          amount={amount} \n          handleAmount={handleAmount} \n          handleCharge={handleCharge} \n          handleSubmit={handleSubmit}\n          edit={edit}\n        />\n        {/* \n          pass through: expenses, clearItems, handleEdit & handleDelete\n        */}\n        <ExpenseList expenses={expenses} clearItems={clearItems} handleEdit={handleEdit} handleDelete={handleDelete}/>\n      </main> \n      <h1>\n        total spending : <span>\n          ${expenses.reduce( (accumulator, current) => {\n            return accumulator += parseInt(current.amount)\n          },0 )}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}